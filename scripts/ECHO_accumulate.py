'''

    Author: Jacob Burba

    ECHO_accumulate.py reads in a radio spectrum from the Signal Hound BB60A spectrum analyzer
    with a time in UTC at which the spectrum was obtained.  This time is used to query the Flask server
    created in ECHO_server.py to obtain the interpolated GPS position of the drone at the query time.
    This GPS positional information is then combined with the query time and radio spectrum and
    written to a file of the form 'accumulated_<date>_<time>.txt' which contains all necessary info for
    ECHO_plot.py.  The accumulated file has four lines in the header which are as follows

        # Accumulated data for <date>, <time>
        # Column Format: 1 Time [GPS s], 2 Lat [deg], 3 Lon [deg], 4 Rel Alt [m], 5: Radio Spectrum
        # lat0,lon0: <latitude of antenna>, <longitude of antenna under test>
        # Freqs: <list of frequencies in corresponding columns of radio spectrum>

    The following rows of data then contain the data specified in the column format comma delimited.

    When calling ECHO_accumulate.py, the user MUST specify all of the following flags

        --host : host IP address of ECHO_server.py.  DO NOT pass port number as the default port
                    5000 is assumed.
        --spec_file : filename for spectral data generated by get_sh_spectra
        --lat0 : latitude of antenna under test
        --lon0 : longitude of antenna under test

    An example call can be seen as follows

    python ECHO_accumulate.py --host 10.1.1.1 --spec_file <sh spectra file> --lat0 <lat> --lon0 <lon>

'''


from astropy.time import Time

import urllib2,optparse,sys,json
import numpy as np
import time

o = optparse.OptionParser()
o.set_description('ECHO_accumulate queries ground station server for \
                          interpolated GPS positions of the drone and combines \
                          them with spectral data into one output file.')
o.add_option('--host',type=str,default='10.1.1.1',
                    help='Host for server (string).  Default is 10.1.1.1')
o.add_option('--spec_file',type=str,help='Radio spectrum file')
o.add_option('--lat0',type=str,help='Latitude of antenna under test')
o.add_option('--lon0',type=str,help='Longitude of antenna under test')
o.add_option('--realtime',action='store_true',
                    help='Specify realtime accumulation of data')
o.add_option('--gps_file',type=str,help='GPS position file')
o.add_option('--freq',type=float,default=137.554,
                    help='Frequency of importance')
opts,args = o.parse_args(sys.argv[1:])


# Reading functions
def get_data(infile,filetype=None,freqs=[],freq_chan=None):
    if filetype == 'gps':
        '''
            Read in GPS position file.
            The first line contains start date/time information for file.
            The second line contains the column formatting:
                0 Time [GPS s], 1 Lat [deg], 2 Lon [deg], 3 Alt [m]
        '''
        gps_arr = []
        lines = open(infile).readlines()
        count = len(lines)
        gps_arr = [map(float,line.rstrip('\n').split(',')) for line in lines[2:] if len(line.split(','))==4]
        return np.array(gps_arr)

    elif filetype == 'sh':
        '''
            Read in Signal Hound file.
            The first line contains a comment and is not needed.
            The second line contains a list of all frequency bins read by the Signal Hound.
            Column format for subsequent lines is:
                0 Time [unix sec], 1: Spectrum [dB]
        '''
        spec_times = []
        spec_raw = []
        lines = open(infile).readlines()
        count = len(lines)
        if count != 0:
            if len(freqs) == 0:
                freqs = np.array(map(float,lines[1].rstrip('\n').split(',')[1:]))
                freq_chan = np.argmax(freqs == opts.freq) # Get index of opts.freq for gridding
                freqs = freqs[freq_chan-10:freq_chan+10] # opts.freq is freqs[10]
            for line in lines:
                if line.startswith('#'):
                    continue
                line = line.rstrip('\n').split(',')
                if len(line) == 4097: # Make sure line has finished printing
                    spec_times.append(float(line[0]))
                    spec_raw.append(map(float,line[freq_chan-10:freq_chan+10]))
        return np.array(spec_times),np.array(spec_raw),np.array(freqs),freq_chan

    elif filetype == 'echo':
        '''
            Read in ECHO file.
            The first two lines contain comment and formatting information.
            Third line contains lat0 and lon0 of antenna under test.
            Column format for subsequent lines is:
                0 Time [gps sec], 1 Lat [deg], 2 Lon [deg], 3 Alt [m], 4: Spectrum [dB]
        '''
        all_Data = []
        freqs = []
        #print '\nReading in %s...' %inFile
        lines = open(infile).readlines()
        # Add information from flight to all_Data array
        if not 'transmitter' in infile:
            lat0,lon0 = map(float,lines[2].rstrip('\n').split(':')[1].strip(' ').split(','))
            freqs = map(float,lines[3].rstrip('\n').split(':')[1].strip(' ').split(','))
            freqs = np.array(freqs)
        for line in lines[4:]: # Data begins on fifth line of accumulated file
            if line.startswith('#'):
                continue
            elif not line.split(',')[1] == '-1':
                    all_Data.append(map(float,line.rstrip('\n').split(',')))
        all_Data = np.array(all_Data)
        #print 'Converted to array with shape %s and type %s' %(all_Data.shape,all_Data.dtype)
        # Extract information from all_Data array
        if 'transmitter' in infile: # Green Bank data
            spec_times,lats,lons,alts = (all_Data[:,1],all_Data[:,2],all_Data[:,3],all_Data[:,4])
            if 'Nant' in infile:
                lat0,lon0 = (38.4248532,-79.8503723)
                if 'NS' in infile:
                    spec_raw = all_Data[:,12:17] # N antenna, NS dipole
                if 'EW' in infile:
                    spec_raw = all_Data[:,24:29] # N antenna, EW dipole
            if 'Sant' in infile:
                lat0,lon0 = (38.4239235,-79.8503418)
                if 'NS' in infile:
                    spec_raw = all_Data[:,6:11] # S antenna, NS dipole
                if 'EW' in infile:
                    spec_raw = all_Data[:,18:23] # S antenna, EW dipole
        else:
            spec_times,lats,lons,alts,spec_raw = (all_Data[:,0],all_Data[:,1],all_Data[:,2],\
                                                                        all_Data[:,3],all_Data[:,4:])
        return spec_times,spec_raw,freqs,lats,lons,alts,lat0,lon0

    else:
        print '\nNo valid filetype found for %s' %infile
        print 'Exiting...\n\n'
        sys.exit()

# Time functions
def unix_to_gps(t):
    return Time(t,scale='utc',format='unix').gps

# Position functions


# Server API functions


# Plotting functions



dt = 0.3 # Time delay between queries of ECHO_server.py
last_row_index = 0 # Index for SH time queries
freq_chan = 0 # Index in spectrum of Valon synth peak freq
freqs = [] # Store frequencies in SH spectrum
add_chans = 10 # Number of bins left/right of freq_chan to keep


'''####################################################
#                                                   REALTIME                                                     #
####################################################'''

if opts.realtime:
    # Check for valid gps_file
    if not opts.gps_file:
        print '\nPlease pass a valid GPS position file (--gps_file)...\n'
        sys.exit()

    # Check for valid spec_file
    if not opts.spec_file:
        print '\nPlease pass a valid spectrum file (--spec_file)...\n'
        sys.exit()

    # Check for latitude and longitude of antenna under test
    if not np.logical_and(opts.lat0,opts.lon0):
        print '\nLatitude (--lat0) and Longitude (--lon0) required...\n'
        sys.exit()

    start_timestr = time.strftime('%H:%M:%S') # Current time in Hours:Min:Sec
    start_datestr = time.strftime('%d_%m_%Y') # Current date in Day_Month_Yr
    outfile_str = 'accumulated_'+start_datestr+'_'+start_timestr+'.txt'

    # Header information for output file
    headstr = '# Accumulated data for '+start_datestr+', '+start_timestr
    colfmtstr = '# Column Format: 1 Time [GPS s], 2 Lat [deg], 3 Lon [deg],\
                            4 Rel Alt [m], 5: Radio Spectrum'
    latlonstr = '# lat0,lon0: %s,%s' %(opts.lat0,opts.lon0)
    with open(outfile_str,'ab') as outfile:
        # Write header information to output file
        outfile.write(headstr+'\n'+colfmtstr+'\n'+latlonstr+'\n')

    # Read in initial SH data
    spec_times,spec_raw,freqs,freq_chan = get_data(opts.spec_file,filetype='sh',\
                                                                freqs=freqs,freq=opts.freq,freq_chan=freq_chan)
    #print 'Read in %d lines from $s' %(spec_times.shape[0],opts.spec_file)
    with open(outfile_str,'ab') as outfile:
        # Write frequencies to output file for indexing in ECHO_plot.py
        outfile.write('# Freqs: '+','.join(map(str,freqs))+'\n')

    # Read in SH data and query ECHO_server.py
    curr_size = spec_times.shape[0]
    while True:
        if not spec_times.shape[0] == curr_size:
            curr_size = spec_times.shape[0]
        while last_row_index < spec_times.shape[0]:
            qtime = unix_to_gps(spec_times[last_row_index])
            fileo = urllib2.urlopen('http://'+opts.host+':5000/ECHO/lms/v1.0/pos/'+str(qtime))
            lines = fileo.read()
            pos = json.loads(lines)
            if not pos['lat'] == -1:
                outstr = str(qtime)+','+str(pos['lat'])+','+str(pos['lon'])+','+\
                             str(pos['alt'])+','+','.join(map(str,spec_raw[i,:]))
                # Check that output string has the correct number of columns
                if len(outstr.split(',')) == 24:
                    with open(outfile_str,'ab') as outfile:
                        outfile.write(outstr+'\n')
            else:
                with open(outfile_str,'ab') as outfile:
                    # Print -1 for all entries with no valid GPS data
                    outfile.write(str(qtime)+','+','.join(map(str,[-1]*23))+'\n')

        # Update row counter and wait for new data
        last_row_index += 1
        time.sleep(dt)

        # Read in new spectrum data
        spec_times,spec_raw,freqs,freq_chan = get_data(opts.spec_file,filetype='sh',\
                                                                    freqs=freqs,freq=opts.freq,freq_chan=freq_chan)
        #print 'Read in %d lines from $s' %(spec_times.shape[0],opts.spec_file)


'''####################################################
#                                                NOT REALTIME                                                 #
####################################################'''


'''
else:
    # do stuff not realtime
    spec_times,spec_raw = get_spec(opts.spec_file)
    start_time = spec_times[0,0]
    start_timestr = time.strftime('%H:%M:%S') # Current time in Hours:Min:Sec
    start_datestr = time.strftime('%d_%m_%Y') # Current date in Day_Month_Yr
    outfile_str = 'accumulated_'+start_datestr+'_'+start_timestr+'.txt'

    # Header information for output file
    headstr = '# Accumulated data for '+start_datestr+', '+start_timestr
    colfmtstr = '# Column Format: 1 Time [GPS s], 2 Lat [deg], 3 Lon [deg], 4 Rel Alt [m], 5: Radio Spectrum'
    latlonstr = '# lat0,lon0: %s,%s' %(opts.lat0,opts.lon0)

'''
