'''

    Author: Jacob Burba

    ECHO_accumulate.py reads in a radio spectrum from the Signal Hound BB60A spectrum analyzer
    with a time in UTC at which the spectrum was obtained.  This time is used to query the Flask server
    created in ECHO_server.py to obtain the interpolated GPS position of the drone at the query time.
    This GPS positional information is then combined with the query time and radio spectrum and
    written to a file of the form 'accumulated_<date>_<time>.txt' which contains all necessary info for
    ECHO_plot.py.  The accumulated file has four lines in the header which are as follows

        # Accumulated data for <date>, <time>
        # Column Format: 1 Time [GPS s], 2 Lat [deg], 3 Lon [deg], 4 Rel Alt [m], 5: Radio Spectrum
        # lat0,lon0: <latitude of antenna>, <longitude of antenna under test>
        # Freqs: <list of frequencies in corresponding columns of radio spectrum>

    The following rows of data then contain the data specified in the column format comma delimited.

    When calling ECHO_accumulate.py, the user MUST specify all of the following flags

        --host : host IP address of ECHO_server.py.  DO NOT pass port number as the default port
                    5000 is assumed.
        --spec_file : filename for spectral data generated by get_sh_spectra
        --lat0 : latitude of antenna under test
        --lon0 : longitude of antenna under test

    An example call can be seen as follows

    python ECHO_accumulate.py --host 10.1.1.1 --spec_file <sh spectra file> --lat0 <lat> --lon0 <lon>

'''


from astropy.time import Time

import urllib2,optparse,sys,json
import numpy as np
import time

o = optparse.OptionParser()
o.set_description('Queries ground station server for interpolated GPS position')
o.add_option('--host',type=str,help='Host for server (string)')
o.add_option('--spec_file',type=str,help='Radio spectrum file')
o.add_option('--lat0',type=str,help='Latitude of antenna under test')
o.add_option('--lon0',type=str,help='Longitude of antenna under test')
o.add_option('--realtime',action='store_true',help='Specify realtime or not')
o.add_option('--gps_file',type=str,help='GPS position file')
opts,args = o.parse_args(sys.argv[1:])

def get_spec(inFile):
    global peak_chan,freqs
    lines = open(inFile).readlines()
    count = len(lines)
    if count != 0:
        if len(freqs) ==0:
            freqs = np.array(map(float,lines[1].rstrip('\n').split(',')[1:]))
            peak_chan = np.argmax(freqs == opts.freq) # Get index of opts.freq for gridding
            freqs = freqs[peak_chan-10:peak_chan+10] # opts.freq is freqs[10]
        spec_times = [float(line.split(',')[0]) for line in lines[2:] if not line.startswith('#')]
        spec_raw = [map(float,line.rstrip('\n').split(',')[peak_chan-10:peak_chan+10]) for line in lines[2:]\
                            if not line.startswith('#')] # channel for opts.freq is spec_raw[i,10]
        return np.array(spec_times),np.array(spec_raw)

dt = 0.3 # Time delay between queries of ECHO_server.py
i = 0 # Index for SH time queries
peak_chan = 0 # Index in spectrum of Valon synth peak freq
freqs = [] # Store frequencies in SH spectrum


'''####################################################
#                                                   REALTIME                                                     #
####################################################'''

if opts.realtime:
    start_timestr = time.strftime('%H:%M:%S') # Current time in Hours:Min:Sec
    start_datestr = time.strftime('%d_%m_%Y') # Current date in Day_Month_Yr
    outfile_str = 'accumulated_'+start_datestr+'_'+start_timestr+'.txt'

    # Header information for output file
    headstr = '# Accumulated data for '+start_datestr+', '+start_timestr
    colfmtstr = '# Column Format: 1 Time [GPS s], 2 Lat [deg], 3 Lon [deg], 4 Rel Alt [m], 5: Radio Spectrum'
    latlonstr = '# lat0,lon0: %s,%s' %(opts.lat0,opts.lon0)
    with open(outfile_str,'ab') as outfile:
        # Write header information to output file
        outfile.write(headstr+'\n'+colfmtstr+'\n'+latlonstr+'\n')

    # Read in initial SH data
    spec_times,spec_raw = get_spec(opts.spec_file)
    with open(outfile_str,'ab') as outfile:
        # Write frequencies to output file for indexing in ECHO_plot.py
        outfile.write('# Freqs: '+','.join(map(str,freqs))+'\n')

    # Read in SH data and query ECHO_server.py
    curr_size = spec_times.shape[0]
    while True:
        if not spec_times.shape[0] == curr_size:
            curr_size = spec_times.shape[0]
            print curr_size
        while i < spec_times.shape[0]:
            qtime = Time(spec_times[i],scale='utc',format='unix').gps # Convert qtime to GPS seconds
            fileo = urllib2.urlopen('http://'+opts.host+':5000/ECHO/lms/v1.0/pos/'+str(qtime))
            lines = fileo.read()
            if not 'Error' in lines:
                pos = json.loads(lines)
                with open(outfile_str,'ab') as outfile:
                    outstr = str(qtime)+','+str(pos['lat'])+','+str(pos['lon'])+','+\
                                 str(pos['alt'])+','+','.join(map(str,raw[i,1:]))
                    outfile.write(outstr+'\n')
            else:
                with open(outfile_str,'ab') as outfile:
                    outfile.write(str(qtime)+','+lines+'\n')
            i += 1
            time.sleep(dt)

'''####################################################
#                                                NOT REALTIME                                                 #
####################################################'''

'''                                          YOU LEFT OFF HERE BUD                                         '''

else:
    # do stuff not realtime
    spec_times,spec_raw = get_spec(opts.spec_file)
    start_time = spec_times[0,0]
    start_timestr = time.strftime('%H:%M:%S') # Current time in Hours:Min:Sec
    start_datestr = time.strftime('%d_%m_%Y') # Current date in Day_Month_Yr
    outfile_str = 'accumulated_'+start_datestr+'_'+start_timestr+'.txt'

    # Header information for output file
    headstr = '# Accumulated data for '+start_datestr+', '+start_timestr
    colfmtstr = '# Column Format: 1 Time [GPS s], 2 Lat [deg], 3 Lon [deg], 4 Rel Alt [m], 5: Radio Spectrum'
    latlonstr = '# lat0,lon0: %s,%s' %(opts.lat0,opts.lon0)
